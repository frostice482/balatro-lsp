--- @class balatro.Global.Functions: balatro.Functions.ButtonCallbacks

--- @class balatro.Functions.ButtonCallbacks
---
--- @field DT_add_money? fun()
--- @field DT_add_round? fun()
--- @field DT_add_ante? fun()
--- @field DT_add_hand? fun()
--- @field DT_add_discard? fun()
--- @field DT_reroll_boss? fun()
--- @field DT_toggle_background? fun()
--- @field DT_add_chips? fun()
--- @field DT_add_mult? fun()
--- @field DT_x_chips? fun()
--- @field DT_x_mult? fun()
--- @field DT_chip_mult_reset? fun()
--- @field DT_win_game? fun()
--- @field DT_lose_game? fun()
--- @field DT_jimbo_toggle? fun()
--- @field DT_jimbo_talk? fun()
---
--- Moves the tutorial to the next step in queue
--- @field tut_next fun()
--- Ensures the compatibility indicator for the Blueprint and Brainstorm Jokers
--- matches with any new changes of compatibility determined by the Joker
--- @field blueprint_compat fun(e)
--- Sorts G.hand in descending order by suit (spades, hearts, clubs, diamonds, then rank)
--- @field sort_hand_suit fun()
--- Sorts G.hand in descending order by rank (rank, then spades, hearts, clubs, diamonds)
--- @field sort_hand_value fun()
--- Checks if the cost of a non voucher card is greater than what the player can afford and changes the
--- buy button visuals accordingly
--- @field can_buy fun(e)
--- Checks if the cost of a non voucher card is greater than what the player can afford and changes the
--- buy button visuals accordingly
--- @field can_buy_and_use fun(e)
--- Checks if the cost of a voucher card is greater than what the player can afford and changes the
--- buy button visuals accordingly
--- @field can_redeem fun(e)
--- Checks if the cost of a booster pack is too much.
--- adjusts booster button visuals accordingly
--- @field can_open fun(e)
--- Ensures that the HUD blind section is only visible when there is an active blind
--- @field HUD_blind_visible fun()
--- Expands or contracts the 'debuff text' area of the blind HUD when it changes,
--- either bigger with a new boss or smaller when it is disabled, or for a smaller blind
--- @field HUD_blind_debuff fun(e)
--- Adds the prefix for the debuff text for the wheel blind
--- @field HUD_blind_debuff_prefix fun(e)
--- Configures the blind reward text
--- @field HUD_blind_reward fun(e)
--- Determines if there is a valid save file to load and continue from main menu
--- @field can_continue fun(e)
--- Configures the element whether the profile can be loaded
--- @field can_load_profile fun(e)
--- Loads a profile from saved data
--- @field load_profile fun(delete_prof_data)
--- Configurs the element whether the profile can be deleted
--- @field can_delete_profile fun(e)
--- Deletes currently focused profile
--- @field delete_profile fun(e)
--- Configures the element whether unlock all feature is available.
--- @field can_unlock_all fun(e)
--- Unlockas all discoveries
--- @field unlock_all fun(e)
--- Creates an alert on this UIE if the round score for this id is a career high score
--- @field high_score_alert fun(e)
--- Creates an alert for beta languages
--- @field beta_lang_alert fun(e)
--- Creates a binding pip on this UIE if controller is being used
--- @field set_button_pip fun(e)
--- Flashes text input cursor for the hooked text input, otherwise sets the width and alpha to 0
--- @field flash fun(e)
--- highlights/lowlights the pips for any dynatext with multiple values based on which one is displaying
--- @field pip_dynatext fun(e)
--- For the toggle
--- @field toggle_button fun(e)
--- For the toggle
--- @field toggle fun(e)
--- Modifies the slider value if it is being dragged. e contains the 'container' for the bar and
--- c contains the 'child' for the bar. either can be dragged. The value is lerped between the size
--- of the child bar and the parent bar depending on any min/max values. Also changes the display text for the slider.
--- @field slider fun(e)
--- Modifies the slider value if it is being dragged. e contains the 'container' for the bar and
--- c contains the 'child' for the bar. either can be dragged. The value is lerped between the size
--- of the child bar and the parent bar depending on any min/max values. Also changes the display text for the slider.
--- @field slider_descreet fun(e)
--- When clicked, changes the selected option from an option cycle. Wraps around.
--- Modifies any pips to show the currently selected option and resets last pip.
--- Calls any functions from opt_callback defined in the option cycle when the value changes.
--- @field option_cycle fun(e)
--- Generalized test framework callback for any testing option cycles\
--- **cycle_config** Is the config table from the original option cycle UIE\
--- **to_val** is the value the option is changing to
--- @field test_framework_cycle_callback fun(args: {cycle_config: table, to_val: any})
--- Changing the current page being viewed for the Joker Collection
--- @field your_collection_joker_page fun(args: { cycle_config: table })
--- Changing the current page being viewed for the tarot and planet card collection
--- @field your_collection_tarot_page fun(args: { cycle_config: table })
--- Changing the current page being viewed for the spectral_pack card collection
--- @field your_collection_spectral_page fun(args: { cycle_config: table })
--- Changing the current page being viewed for the booster pack card collection
--- @field your_collection_booster_page fun(args: { cycle_config: table })
--- Changing the current page being viewed for the voucher collection
--- @field your_collection_voucher_page fun(args: { cycle_config: table })
--- Changing the selected card back
--- @field change_selected_back fun(args: { to_val: any })
--- Changing the collection viewed card back
--- @field change_viewed_back fun(args: { to_val: any })
--- Changes viewed stake to given key
--- @field change_stake fun(args: { to_key: number })
--- Switch VSync on or off - add the change to the settings change queue
--- @field change_vsync fun(args: { to_key: number })
--- Changes the screen resolution to the cycled resolution.\
--- Note - an issue with windows scaling above 100% means that these resolutions may not match the actual monitor resolution,
--- they are more like render resolutions adjusted to fit the screen with scaling
--- @field change_screen_resolution fun(args: {cycle_config: table, to_key: any})
--- Changes the screen mode\
--- Options: Windowed, Fullscreen, Borderless
--- @field change_screenmode fun(args: {cycle_config: table, to_key: any})
--- Changes the displaying monitors
--- @field change_display fun(args: {cycle_config: table, to_val: any})
--- Helper function to re-add the resolution cycle UIE with updated data
--- @field change_window_cycle_UI fun()
--- Changes the speed that the game runs at, does not affect all timers, just G.TIMERS.TOTAL
--- @field change_gamespeed fun(args: {cycle_config: table, to_val: any})
--- Changes the relative position of play and discard buttons
--- @field change_play_discard_position fun(args: {cycle_config: table, to_key: any})
--- Changes the Shadow setting
--- @field change_shadows fun(args: {cycle_config: table, to_val: any})
--- Changes the Pixel smoothing, all sprites need to be realoaded when this changes
--- @field change_pixel_smoothing fun(args: {cycle_config: table, to_key: any})
--- Changes the Bloom amount for the CRT effect, number of samples to take for bloom
--- @field change_crt_bloom fun(args: {cycle_config: table, to_key: any})
--- Changes collab
--- @field change_collab fun(args: {cycle_config: table, to_key: any})
--- Passes a keyboard input to the controller when a key UI button is pressed
--- @field key_button fun(e)
--- Modifies the text input to show the current text value being modified. Shows the prompt text if\
--- the text input area is not hooked. Also modifies the UIE colour to show the hooked/non hooked colour\
--- If using a keyboard, pops it up here or removes it if using KBM
--- @field text_input fun(e)
--- Pastes seed to the input field
--- @field paste_seed fun(e)
--- When clicked, hooks the text input defined by e->1->1, which should be the text input UIE
--- @field select_text_input fun(e)
--- Handles all key inputs for the hooked text input.
--- @field text_input_key fun(args)
--- Determines if there are any graphical changes in the queue that require window re-initialization,
--- changes the button accordingly
--- @field can_apply_window_changes fun(e)
--- Applies all window changes, including updates to the screenmode, selected display, resolution and vsync.\
--- These changes are all defined in the G.SETTINGS.QUEUED_CHANGE table. Any unchanged settings use the previous value
--- @field apply_window_changes fun(_initial)
--- Monitors the run option deck to determine if a new 'back' has been chosen from the option cycle\
--- if so, this function removes the old UI describing the ability of the back and replaces it with the new ability UI
--- @field RUN_SETUP_check_back fun(e)
--- @field RUN_SETUP_check_back_name fun(e)
--- @field RUN_SETUP_check_stake fun(e)
--- @field RUN_SETUP_check_stake2 fun(e)
--- @field change_viewed_collab fun(args)
--- @field CREDITS_check_collab fun(e)
--- @field change_tab fun(e)
--- The overlay menu is a full screen menu interface, and is usually called from button presses. The base Overlay menu function here\
--- creates a global G.OVERLAY_MENU that represents this full screen UIBox. The game may be paused at this time as well\
--- The generated UIBox is created below the visible screen area and eased up to the center of the screen
--- @field overlay_menu fun(args: { definition: balatro.UIElement.Definition, config?: balatro.UIElement.Config })
--- Removes the overlay menu if one exists, unpauses the game, and saves the settings to file
--- @field exit_overlay_menu fun()
--- Removes overlay menu and immediately generates the next unlock menu if there is one
--- @field continue_unlock fun()
---
--- @field test_framework fun(options)
--- Creates options menu UI
--- @field options fun()
--- Creates poker hand levels & times played
--- @field current_hands fun(_, simple)
--- Creates run info UI
--- @field run_info fun()
--- Creates deck info UI
--- @field deck_info fun()
--- Creates settings UI
--- @field settings fun(_, instant)
--- @field show_credits fun()
--- @field language_selection fun()
--- @field your_collection fun()
--- @field your_collection_blinds fun()
--- @field your_collection_jokers fun()
--- @field your_collection_tarots fun()
--- @field your_collection_planets fun()
--- @field your_collection_spectrals fun()
--- @field your_collection_vouchers fun()
--- @field your_collection_enhancements_exit_overlay_menu fun()
--- @field your_collection_enhancements fun()
--- @field your_collection_decks fun()
--- @field your_collection_editions fun()
--- @field your_collection_tags fun()
--- @field your_collection_seals fun()
--- @field your_collection_boosters fun()
--- Craeates challenge selection UI
--- @field challenge_list fun(e)
--- Creates high scores UI
--- @field high_scores fun()
--- Creates collab deck customization UI
--- @field customize_deck fun()
--- Creates usage overlay UI
--- @field usage fun()
--- Creates run setup UI
--- @field setup_run fun(e)
--- @field wait_for_high_scores fun(e)
--- Creates unlock notifications, then creates run setup UI
--- @field notify_then_setup_run fun(e)
--- Updates challenge description
--- @field change_challenge_description fun(e)
--- @field change_challenge_list_page fun(args)
--- Creates deck selection UI for challenge
--- @field deck_view_challenge fun(e)
--- Creates profile selection UI
--- @field profile_select fun()
--- Quits game
--- @field quit fun()
--- @field quit_cta fun()
---
--- Opens Balatro demo survey
--- @field demo_survey fun()
--- Opens louisfsoundtracks's IG, the music composer for Balatro
--- @field louisf_insta fun()
--- Opens steam
--- @field wishlist_steam fun()
--- Opens playbalatro.com
--- @field go_to_playbalatro fun()
--- Opens Discard
--- @field go_to_discord fun()
--- Opens Discord localization channel
--- @field go_to_discord_loc fun()
--- Open localization survey
--- @field loc_survey fun()
--- Opens Twitter
--- @field go_to_twitter fun()
---
--- Unlocks given achievement
--- @field unlock_this fun(e)
--- Resets achievements
--- @field reset_achievements fun()
--- Refresh card constrasts
--- @field refresh_contrast_mode fun()
--- Creates a warning for beta language
--- @field warn_lang fun(e)
--- Changes language
--- @field change_lang fun(e)
--- Copied seed to clipboard
--- @field copy_seed fun()
--- Starts new / continues saved run
--- @field start_setup_run fun(e)
--- Starts challenge run
--- @field start_challenge_run fun(e)
--- Status tutorial run
--- @field start_tutorial fun(e)
--- Creates super juice effect.
--- Used by `hand_chip_total_UI_set`, `hand_mult_UI_set`, and `hand_chip_UI_set`.
--- @field text_super_juice fun(e, amt: number)
--- Constrols if use card can be greyed out.
--- Effect is noticable when using Wheel of Fortune when all jokers already have an edition
--- @field can_use_consumeable fun(e)
--- Creates an infotip children. Used by `G.UIDEF.card_h_popup`
--- @field show_infotip fun(e)
--- Uses current card
--- @field use_card fun(e, mute, nosave)
--- Sells current card
--- @field sell_card fun(e)
--- @field can_confirm_contest_name fun(e)
--- @field confirm_contest_name fun()
--- @field change_contest_name fun()
--- Skips current tutorial section
--- @field skip_tutorial_section fun()
--- Checks for space available when trying to add a joker/consumable/card.
--- @field check_for_buy_space fun(card: balatro.Card): boolean
--- Buys an item from shop
--- @field buy_from_shop fun(e)
--- Removes shop. Used when "Next Round" button is clicked
--- @field toggle_shop fun()
--- Selects a blind
--- @field select_blind fun(e)
--- Skips currently opened booster
--- @field skip_booster fun(e)
--- Ends current consumable. used when skipping booster packs.
--- `delayfac` is number of seconds to delay, multiplied by 0.2
--- @field end_consumeable fun(e, delayfac?: number)
--- Skips current focused blind during selection
--- @field skip_blind fun(e)
--- Configures reroll button
--- @field reroll_boss_button fun(e)
--- Rerolls the bos
--- @field reroll_boss fun(e)
--- Rerolls the shop
--- @field reroll_shop fun()
--- Cash out button handler when a round has ended
--- @field cash_out fun(e)
--- Starts new run
--- @field start_run fun(e, args: balatro.Game.StartRunParam)
--- Exits from current run to main menu
--- @field go_to_menu fun()
--- Demo use.
--- @field go_to_demo_cta fun()
--- Demo use.
--- @field show_main_cta fun(e)
--- Creates a wiping transition (e.g. starting / leaving run)
--- @field wipe_on fun(message?: string, no_card?: boolean, timefac?: number, alt_colour?: ColorHex)
--- Removes a wiping transition
--- @field wipe_off fun()
---
--- Controls UI for seeded run toggle
--- @field toggle_seeded_run fun(e)
--- Controls the current chips text displayed.
--- @field chip_UI_set fun(e)
--- Controls the chips text scale for the current blind
--- @field blind_chip_UI_scale fun(e)
--- Controls the mult text displayed.
--- @field hand_mult_UI_set fun(e)
--- Controls the chips text displayed.
--- @field hand_chip_UI_set fun(e)
--- Controls the total chips text displayed.
--- @field hand_chip_total_UI_set fun(e)
--- Controls the flame effect
--- @field flame_handler fun(e)
--- Controls current poker hand text
--- @field hand_text_UI_set fun(e)
--- Controls if the play hand button is greyed out
--- @field can_play fun(e)
--- Controls visibility of the element depending if currently viewed deck is unlocked
--- @field can_start_run fun(e)
--- Controls visibility of the element depending if currently on a blind
--- @field visible_blind fun(e)
--- Controls if the shop reroll button is greyed out.
--- @field can_reroll fun(e)
--- Controls if the discard button is greyed out.
--- @field can_discard fun(e)
--- Controls visibility of green use button selecting a joker / consumable
--- @field can_select_card fun(e)
--- Controls if the sell card button is greyed out
--- @field can_sell_card fun(e)
--- Controls if the skip button is greyed out
--- @field can_skip_booster fun(e)
--- Controls if the voucher is empty
--- @field shop_voucher_empty fun(e)
--- Controls blind selection: currentlu focused blind, button colors, enabled / disabled buttons, etc.
--- @field blind_choice_handler fun(e)
--- Controls tag description visibility when being hovered during blind selection
--- @field hover_tag_proxy fun(e)