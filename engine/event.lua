--- @meta

--- @class balatro.Event: balatro.Object
--- Determines how an event is triggered.
--- - `immediate` Executes handler immediately
--- - `before` Executes handler immediately, but only after some delay the event is fully marked as completed
--- - `afterward` Executes handler after specified delay
--- - `confition` Same as immediate, but only used when default handler is used
--- - `ease` Eases value and modifies value in table.
---   Function is called back with eased value during that time.
---   Handler return value determines the value to set on the table.
--- @field trigger balatro.Event.TriggerType
--- Prevents subsequent events  in queues from being handled
--- @field blocking boolean
--- Allows this event to be blocked from being handled
--- @field blockable boolean
--- Determines if this event is completed
--- @field complete boolean
--- Function handler.
--- The `n: number` parameter is only effective for trigger type `ease`.
--- This should return boolean to determine if the event is completed or not
--- @field func fun(n: number?): boolean|number
--- Use depends on trigger type.
--- - `ease` Easing duration
--- - `after` Delay before handler is executed
--- - `before` Delay before event is fully marked as completed
--- @field delay number
--- Prevents the event from being removed from queue when `EventManager:clear_queue` is called
--- @field no_delete boolean
--- Determines if the event is created on pause.
--- @field created_on_pause boolean
--- TImer type to use. Defaults may use `TOTAL` when unpaused, or `REAL` when paused
--- @field timer balatro.TimerType
--- When the event is created.
--- @field time number
--- Only when trigger is `ease`. Contains information for easing.
--- @field ease? balatro.Event.Ease
--- Only when trigger is `condition`. Contains information for value comparison.
--- @field condition? balatro.Event.Condition
--- If false, sets `time` to current timer value when handle is called, then sets to true.
--- @field start_timer boolean
local IEvent = {}

--- @param config balatro.Event.Config
function IEvent:init(config) end

--- @param resultTarget balatro.Event.Result Result object to return to
function IEvent:handle(resultTarget) end

--- @type balatro.Event | fun(config: balatro.Event.Config): balatro.Event
Event = function() end

--- @class balatro.Event.Config
--- Determines how an event is triggered.
--- - `immediate` Executes handler immediately
--- - `before` Executes handler immediately, but only after some delay the event is fully marked as completed
--- - `afterward` Executes handler after specified delay
--- - `confition` Same as immediate, but only used when default handler is used
--- - `ease` Eases value and modifies value in table.
---   Function is called back with eased value during that time.
---   Handler return value determines the value to set on the table.
---
--- Detault: `immediate`
--- @field trigger balatro.Event.TriggerType?
--- Prevents subsequent events  in queues from being handled.
--- Default: `true`
--- @field blocking boolean?
--- Allows this event to be blocked from being handled.
--- Default: `true`
--- @field blockable boolean?
--- If false, sets `time` to current timer value when handle is called.
--- Default: `false`
--- @field start_timer boolean?
--- Function handler.
--- The `n: number` parameter is only effective for trigger type `ease`.
--- This should return boolean to determine if the event is completed or not.
---
--- Default: `() => true`
--- @field func? fun(n: number?): boolean|number
--- Use depends on trigger type.
--- - `ease` Easing duration
--- - `after` Delay before handler is executed
--- - `before` Delay before event is fully marked as completed
---
--- Default: `0`
--- @field delay number?
--- Prevents the event from being removed from queue when `EventManager:clear_queue` is called.
--- Default: `false`
--- @field no_delete? boolean
--- Sets `created_on_pause` to true.
--- @field pause_force? boolean
--- Default: `TOTAL` if unpaused, `REAL` if paused
--- @field timer balatro.TimerType?
--- Only for trigger == "ease" or "condition"
--- @field ref_table table?
--- Only for trigger == "ease" or "condition"
--- @field ref_value any?
--- Only for trigger == "ease". Default: `lerp`
--- @field ease balatro.Event.EaseType?
--- Only for trigger == "ease"
--- @field ease_to number?
--- Only for trigger == "condition"
--- @field stop_val any?

--- @class balatro.Event.Ease
--- Easing type
--- - `lerp` x
--- - `quad` `x^2`
--- - `elastic` `-(2 ^ (10 * x - 10)) * sin((x * 10 - 10.75) * 2*pi/3)`
--- @field type balatro.Event.EaseType
--- @field ref_table table
--- @field ref_value any
--- @field start_val number
--- @field end_val number
--- @field start_time? number
--- @field end_time? number

--- @class balatro.Event.Condition
--- @field ref_table table
--- @field ref_value any
--- @field stop_val any

--- @class balatro.Event.Result
--- Skips current event queue, allowing other events to execute.
--- This behaves the same as having everything set to `false`.
--- @field pause_skip boolean
--- Blocks rest of the events, preventing them from being handled,
--- unless blockable is false.
--- @field blocking boolean
--- Marks this event as completed amd removed this event from list.
--- Requires `time_done` to be also true.
--- @field completed boolean
--- Marks this event as done amd removed this event from list.
--- Requires `completed` to be also true.
--- @field time_done boolean

--- @alias balatro.Event.TriggerType 'immediate' | 'ease' | 'condition' | 'after' | 'before'
--- @alias balatro.Event.EaseType 'lerp' | 'elastic' | "quad"
